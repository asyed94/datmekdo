<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Call parent 'create' event
event_inherited();

// Possible vals = ["left", "right"]
self.dir = "right";

/* Possible vals = [
 *   "standing",
 *   "crouching",
 *   "moving",
 *   "jumping"
 * ]
 */
self.state = "standing";

self.controllable = false;

self.accel = 0.7;
self.damp = 0.5;
self.max_speed = 5;
self.jump_height = 13;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (self.controllable) {
    var left = 0;
    var right = 0;
    var move = 0;
    
    var oldState = self.state;
    var oldDir = self.dir;
    
    // Move
    if (keyboard_check(vk_left)) {
        left = -1;
    }
    if (keyboard_check(vk_right)) {
        right = 1;
    }
    move = left + right;
    // Move left
    if (move == -1 &amp;&amp; self.state != "crouching") {
        self.dir = "left";
        if (self.state != "jumping") self.state = "moving";
        hspeed -= self.accel;
    }
    // Move right
    else if (move == 1 &amp;&amp; self.state != "crouching") {
        self.dir = "right";
        if (self.state != "jumping") self.state = "moving";
        hspeed += self.accel;
    }
    // Stand still
    else if (move == 0 &amp;&amp; self.state != "crouching" &amp;&amp; self.state != "jumping") {
        self.state = "standing";
    }
    
    // Jump
    if (keyboard_check_pressed(vk_up) &amp;&amp; self.state != "crouching") {
        if (place_meeting(x, y+1, Block)) {
            self.state = "jumping";
            vspeed = -self.jump_height;
        }
    }
    if (self.state == "jumping") {
        if (place_meeting(x, y+1, Block) &amp;&amp; vspeed == 0) {
            self.state = "standing";
        }
    }
    
    // Crouch
    if (keyboard_check_pressed(vk_down)) {
        self.state = "crouching";
    }
    if (self.state == "crouching") {
        if (!keyboard_check(vk_down)) {
            if (place_meeting(x, y - 1, Block)) {
                if (self.dir == "left") hspeed -= 0.9;
                if (self.dir == "right") hspeed += 0.9;
            }
            else {
                self.state = "standing";
            }
        }
    }
    
    /*
    // DBG messages
    if (oldState != self.state) {
        show_debug_message("----");
        show_debug_message("state");
        show_debug_message(self.state);
        show_debug_message("----");
    }
    if (oldDir != self.dir) {
        show_debug_message("----");
        show_debug_message("dir");
        show_debug_message(self.dir);
        show_debug_message("----");
    }
    */
}

// Speed checks
if (self.state == "standing" || self.state == "crouching") {
    if (abs(hspeed) &gt; 0) {
        hspeed -= (sign(hspeed) * self.damp);
    }
}
if (abs(hspeed) &lt;= 0.2) {
    hspeed = 0
}
if (abs(hspeed) &gt; self.max_speed) {
    hspeed = sign(hspeed) * self.max_speed
}

// Call parent 'step' event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
